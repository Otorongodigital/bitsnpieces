function writeRatesToSheet() {
  const sheetName = "2022 USD PER UNIT";
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(sheetName);

  if (!sheet) {
    Logger.log("Sheet not found.");
    return;
  }

  Logger.log("Starting to write rates to the sheet...");

  const targetCurrency = "USD";
  const baseCurrencies = [
    "AUD", "CAD", "CNY", "EUR", "FJD", "GBP", "HKD",
    "IDR", "INR", "JPY", "MXN", "NZD", "PHP",
    "PLN", "SGD", "THB", "ZAR"
  ];

  // Ensure the currency codes are written in the first column starting from the second row
  for (let i = 0; i < baseCurrencies.length; i++) {
    sheet.getRange(i + 2, 1).setValue(baseCurrencies[i]);
  }

  // Adjust the start date to 01/02/2021 and end date to 28/02/2021 for February
  const startDate = new Date("2022-09-01");
  const endDate = new Date("2022-09-30");

  let currentColumn = 245; // Start writing rates from the thirty-third column (Column AG)
  const time = "13:00";
  const username = 'XXX';
  const password = 'XXX';
  const authString = Utilities.base64Encode(username + ':' + password);

  let errorCount = 0;

  for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
    let dateString = Utilities.formatDate(new Date(d), Session.getScriptTimeZone(), "yyyy-MM-dd");
    let displayDate = Utilities.formatDate(new Date(d), Session.getScriptTimeZone(), "dd/MM/yyyy");

    Logger.log(`Processing rates for date: ${displayDate}`);

    // Set the date in the first row of the current column
    sheet.getRange(1, currentColumn).setValue(displayDate);
    let rateData = [];

    for (let i = 0; i < baseCurrencies.length; i++) {
      const baseCurrency = baseCurrencies[i];
      const url = `https://xecdapi.xe.com/v1/historic_rate?from=${baseCurrency}&to=${targetCurrency}&amount=1&date=${dateString}&time=${encodeURIComponent(time)}&decimal_places=8`;

      const options = {
        "method": "get",
        "headers": {
          "Authorization": "Basic " + authString,
          "accept": "application/json"
        },
        "muteHttpExceptions": true
      };

      try {
        const response = UrlFetchApp.fetch(url, options);
        const json = JSON.parse(response.getContentText());

        if (json.to && json.to[0] && json.to[0].mid) {
          const rate = json.to[0].mid;
          rateData.push(rate);
          Logger.log(`Rate for ${baseCurrency} to ${targetCurrency} on ${dateString}: ${rate}`);
        } else {
          Logger.log(`No rate data for ${baseCurrency} on ${dateString}`);
          rateData.push("No Data");
        }
      } catch (e) {
        Logger.log(`Error fetching rate for ${baseCurrency} on ${dateString}: ${e.message}`);
        rateData.push("Error");
        errorCount++;
      }
    }

    // Write the collected rates for the current day into the sheet starting from the thirty-third column (Column AG)
    sheet.getRange(2, currentColumn, rateData.length, 1).setValues(rateData.map(r => [r]));
    currentColumn++;
    Utilities.sleep(100); // Sleep for 0.1 second (100 milliseconds)
  }

  Logger.log(`Completed writing rates. Processed ${endDate.getDate() - startDate.getDate() + 1} days with ${errorCount} errors.`);
}
